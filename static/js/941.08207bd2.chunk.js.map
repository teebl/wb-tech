{"version":3,"file":"static/js/941.08207bd2.chunk.js","mappings":"ySAiBMA,GAAQC,EAAAA,EAAAA,aACZ,WAUEC,GACI,IATFC,EASC,EATDA,MACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,SACAC,EAMC,EANDA,UAMC,IALDC,QAAAA,OAKC,MALS,aAKT,MAJDC,UAAAA,OAIC,MAJW,aAIX,EAHEC,GAGF,YAQGC,GAAaC,EAAAA,EAAAA,GACjBL,EACA,OACA,OACA,QACA,OACA,WACA,aACA,eACA,SACA,oBACA,qBAjBIH,EAAc,2BACdC,EAAc,4BAEX,IAkCT,OACE,iCACE,kCACEF,IAAKA,EACLM,UAbwD,SAACI,GAC3C,UAAdA,EAAMC,IAKVL,EAAUI,GAJRL,KAYED,UAAWI,GACPD,GAJN,aAMGJ,KAvBLF,IACE,cAAGG,UAAU,uDAAb,SACGH,UC1CLW,EAAoB,gDACpBC,EAAuB,yCAOvBC,EAAiB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXhB,GAAMiB,EAAAA,EAAAA,aACZ,GAA0CC,EAAAA,EAAAA,YAA1C,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAoCF,EAAAA,EAAAA,YAApC,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwBJ,EAAAA,EAAAA,UAA6B,SAArD,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA0BN,EAAAA,EAAAA,UAAiB,IAA3C,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAgCR,EAAAA,EAAAA,UAAiB,IAAjD,eAAOS,EAAP,KAAiBC,EAAjB,KAEMC,EAAa,kBAAMjB,EAAkBkB,KAAKL,IAC1CM,EAAgB,kBAAMlB,EAAqBiB,KAAKH,KAEtDK,EAAAA,EAAAA,YAAU,WACkB,IAAD,EAAZ,aAATT,IACF,UAAAvB,EAAIiC,eAAJ,SAAaC,WAEd,CAACX,IAEJ,IAAMY,EAAoB,kCA0BpBC,EAAW,WACf,OAAQb,GACN,IAAK,QAEH,YAzBU,KAAVE,IACCI,KAAcP,EAAca,GAE7BN,MACFP,OAAce,GACdb,EAAQ,eAqBR,IAAK,WAEH,OAlBCK,KAAcP,EAAca,GAC5BJ,KAAiBX,EAdtB,mGAgBIS,KAAgBE,MAClBT,OAAce,GACdjB,OAAiBiB,GAEjBtB,EAAS,OAYT,QACE,SAYN,OACE,UAAC,KAAD,CAAKX,UAAU,WAAf,WACE,uDACA,kJAIA,SAACN,EAAD,CACEwC,WAAS,EACTC,KAAK,QACLC,YAAY,2BACZnC,QAAS+B,EACTK,SApByD,SAAC/B,GAC9DgB,EAAShB,EAAMgC,OAAOC,QAoBlB1C,MAAOoB,EACPnB,MAAO2B,IACPc,MAAOlB,KAET,SAAC3B,EAAD,CACEE,IAAKA,EACLuC,KAAK,WACLC,YAAY,mBACZnC,QAAS,WACPuC,QAAQC,IAAI,SACZT,KAEFhC,UAAoB,aAATmB,EAAsB,SAAW,GAC5CtB,MAAgB,aAATsB,EAAsBJ,OAAgBkB,EAC7CnC,MAAO6B,IACPU,SAhC4D,SAAC/B,GACjEkB,EAAYlB,EAAMgC,OAAOC,QAgCrBA,MAAOhB,KAET,SAAC,IAAD,CAAQmB,KAAK,SAASC,QAASX,EAA/B,sCC7GN,EANmB,kBACjB,gBAAKhC,UAAU,mDAAf,UACE,SAACU,EAAD","sources":["components/shared/form/Input/Input.tsx","components/signup/SignupCard/SignupCard.tsx","routes/Signup.tsx"],"sourcesContent":["import React, {\n  FC,\n  forwardRef,\n  ForwardRefExoticComponent,\n  InputHTMLAttributes,\n  KeyboardEventHandler,\n  ReactNode,\n} from \"react\";\nimport { mergeClassNames } from \"../../../../helpers\";\n\ninterface Props extends InputHTMLAttributes<HTMLInputElement> {\n  error?: string;\n  valid: boolean;\n  onEnter: () => void;\n  children?: ReactNode | ReactNode[];\n}\n\nconst Input = forwardRef<HTMLInputElement, Props>(\n  (\n    {\n      error,\n      valid,\n      children,\n      className,\n      onEnter = () => {},\n      onKeyDown = () => {},\n      ...rest\n    },\n    ref\n  ) => {\n    const getBorder = () => {\n      if (error) return \"border-rose-400 border-2\";\n      if (valid) return \"border-green-400 border-2\";\n\n      return \"\";\n    };\n\n    const classNames = mergeClassNames(\n      className,\n      \"py-3\",\n      \"px-4\",\n      \"block\",\n      \"my-4\",\n      \"border-1\",\n      \"rounded-xl\",\n      \"bg-slate-100\",\n      \"w-full\",\n      \"focus:bg-slate-50\",\n      \"focus:outline-none\",\n      getBorder()\n    );\n\n    const renderError = () =>\n      error && (\n        <p className=\"bg-red-200 p-2 rounded-b-md text-slate-600 m-4 -mt-4\">\n          {error}\n        </p>\n      );\n\n    const handleKeyDown: KeyboardEventHandler<HTMLInputElement> = (event) => {\n      if (event.key === \"Enter\") {\n        onEnter();\n        return;\n      }\n\n      onKeyDown(event);\n    };\n\n    return (\n      <>\n        <input\n          ref={ref}\n          onKeyDown={handleKeyDown}\n          className={classNames}\n          {...rest}\n        >\n          {children}\n        </input>\n        {renderError()}\n      </>\n    );\n  }\n);\n\nexport { Input };\n","import React, {\n  ChangeEventHandler,\n  createRef,\n  FC,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Button } from \"../../shared/action\";\nimport { Box } from \"../../shared/composition\";\nimport { Input } from \"../../shared/form\";\n\nconst VALID_EMAIL_REGEX = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst VALID_PASSWORD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n\nconst Steps = {\n  email: \"email\",\n  password: \"password\",\n};\n\nconst SignupCard: FC = () => {\n  const navigate = useNavigate();\n\n  const ref = createRef<HTMLInputElement>();\n  const [passwordError, setPasswordError] = useState<string | undefined>();\n  const [emailError, setEmailError] = useState<string | undefined>();\n  const [step, setStep] = useState<keyof typeof Steps>(\"email\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const emailValid = () => VALID_EMAIL_REGEX.test(email);\n  const passwordValid = () => VALID_PASSWORD_REGEX.test(password);\n\n  useEffect(() => {\n    if (step === \"password\") {\n      ref.current?.focus();\n    }\n  }, [step]);\n\n  const emailErrorMessage = \"The email entered is not valid.\";\n  const passwordErrorMessage =\n    \"The password must have a minimum eight characters, and at least one letter and one number.\";\n\n  const stepToPassword = () => {\n    if (email === \"\") return;\n    if (!emailValid()) setEmailError(emailErrorMessage);\n\n    if (emailValid()) {\n      setEmailError(undefined);\n      setStep(\"password\");\n    }\n  };\n\n  const stepToSubmit = () => {\n    if (!emailValid()) setEmailError(emailErrorMessage);\n    if (!passwordValid()) setPasswordError(passwordErrorMessage);\n\n    if (emailValid() && passwordValid()) {\n      setEmailError(undefined);\n      setPasswordError(undefined);\n\n      navigate(\"/\");\n    }\n  };\n\n  const nextStep = () => {\n    switch (step) {\n      case \"email\":\n        stepToPassword();\n        return;\n      case \"password\":\n        stepToSubmit();\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleEmailInput: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordInput: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setPassword(event.target.value);\n  };\n\n  return (\n    <Box className=\"max-w-lg\">\n      <h1>Get started with Wrapbook</h1>\n      <p>\n        Tackle timecards, payroll, and insurance with Wrapbook, a powerful and\n        easy to use platform for managing productions.\n      </p>\n      <Input\n        autoFocus\n        type=\"email\"\n        placeholder=\"Enter your email address\"\n        onEnter={nextStep}\n        onChange={handleEmailInput}\n        error={emailError}\n        valid={emailValid()}\n        value={email}\n      />\n      <Input\n        ref={ref}\n        type=\"password\"\n        placeholder=\"Enter a password\"\n        onEnter={() => {\n          console.log(\"enter\");\n          nextStep();\n        }}\n        className={step !== \"password\" ? \"hidden\" : \"\"}\n        error={step === \"password\" ? passwordError : undefined}\n        valid={passwordValid()}\n        onChange={handlePasswordInput}\n        value={password}\n      />\n      <Button role=\"submit\" onClick={nextStep}>\n        Continue to Wrapbook\n      </Button>\n    </Box>\n  );\n};\n\nexport { SignupCard };\n","import React, { FC } from \"react\";\nimport { SignupCard } from \"../components/signup\";\n\nconst Signup: FC = () => (\n  <div className=\"h-full flex flex-col justify-center items-center\">\n    <SignupCard />\n  </div>\n);\n\nexport default Signup;\n"],"names":["Input","forwardRef","ref","error","valid","children","className","onEnter","onKeyDown","rest","classNames","mergeClassNames","event","key","VALID_EMAIL_REGEX","VALID_PASSWORD_REGEX","SignupCard","navigate","useNavigate","createRef","useState","passwordError","setPasswordError","emailError","setEmailError","step","setStep","email","setEmail","password","setPassword","emailValid","test","passwordValid","useEffect","current","focus","emailErrorMessage","nextStep","undefined","autoFocus","type","placeholder","onChange","target","value","console","log","role","onClick"],"sourceRoot":""}